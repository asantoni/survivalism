#import "doomzgame.acs"
#import "player.acs"
#import "math.acs"
#include "zcommon.acs"
#import "crafting.acs"
#import "quests.acs"
//#libray must go last!!!!!!!!!!
#library "questbox"

#define QUEST_GRID_WIDTH 5


/* Can't mix strings and integers in a 2D array with ACS/ACC so I have to break this
   up into arrays by type. See: http://forum.zdoom.org/viewtopic.php?f=3&t=28111
  */
#define QUESTBOX_OPTIONS_LENGTH 2 //<--- Edit me if you add more craftable stuff
str questBoxOptions[QUESTBOX_OPTIONS_LENGTH] = {
	"Return",
	"Abort Current Quest",
};
	
int questBoxScripts[QUESTBOX_OPTIONS_LENGTH] = {
	751, //Return
	781, //Abort quest
};

/*
str basicResults[QUESTBOX_OPTIONS_LENGTH][MAX_CRAFTING_RESULT] = 
{
	{"", "", "", ""},	//Return
	{"CraftingBoxItem", 		"misc/i_pkup", "You built a crafting box!", "You need 8 wood to assemble a crafting box.\nTry chopping some logs to get wood."},
	{"", "", "Your inventory has been saved.", ""},
	{"", "", "Your inventory has been loaded. Don't die.", ""},
};*/


script 780 (void)  //ENTER
{ 
	int buttons;
	int selectedItemIdx = 0;
	int buttonDepressed = false;

	//Don't allow this button to be pressed if you're spectating
	int playerTID = ActivatorTID();

	int playerOffset = playerTID - PLAYER_MIN_TID;	
	if (PlayerIsSpectator(playerOffset) > 0 || PlayerIsPseudoSpec(playerOffset))
	{
		terminate;
	}
	//Needed for when the special gets called when a crafting box dies.
	if ( CheckInventory("Health")<=0 )
	{
		terminate;
	}
	//If the activator is not a player (like when the box itself dies),
	//just return. NOTE: This is actually not used because of ActivateOwnDeathSpecials in MAPINFO.
	if (PlayerNumber() < 0) {
		terminate;
	}

	//Prevent each spacebar press from re-showing the menu
	if (CheckInventory("ShowCraftingScreen") > 0) {	
		terminate;
	}
	
	GiveInventory("ShowCraftingScreen", 1);
	Delay(1); //Inventory sync delay
	Delay(1); //Inventory sync delay
	Delay(1); //Inventory sync delay
	Delay(1); //Inventory sync delay
	Delay(1); //Inventory sync delay
	Delay(1); //Inventory sync delay
	Delay(1); //Inventory sync delay
	Delay(1); //Inventory sync delay

	//Fade to half intensity black...
	if (CheckInventory("ShowCraftingScreen") > 0) {
		ThingSound(playerTID, "click", 127);
		FadeTo (0, 0, 0, 0.5, 0.2);
	}
   
	//Delay(1); //Inventory sync delay
	//Delay(1); //Inventory sync delay
	//Delay(1); //Inventory sync delay
	//GiveInventory("ShowCraftingScreen", 1);

	SetHudSize(640, 480, true);
	while (CheckInventory("ShowCraftingScreen") > 0)
	{
		//print(s:"ShowCraftingScreen present!");
		SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN); //Freeze the player

		buttons = GetPlayerInput(-1, INPUT_BUTTONS);
		//print(d:buttons);

		int numMenuItems = NUM_AVAILABLE_QUESTS + QUESTBOX_OPTIONS_LENGTH;
		for (int i = 0; i < QUESTBOX_OPTIONS_LENGTH; i++)
		{
			int yPos = 200.0 + i*20.0;//FixedMul(i, 0.1);
			int messageId = BASE_MESSAGE_ID + i;
			int colour = CR_RED;
			str strLine = questBoxOptions[i];

			if (i == selectedItemIdx) {
				colour = CR_GOLD;
				HudMessage(s:"> ", s:strLine, s:" <"; HUDMSG_PLAIN, messageId, colour, 100.1, yPos, 0);
			} else {
				/*
				if (basicCheckRequirements(i)) {
					colour = CR_GREEN;
				}*/
				HudMessage(s:strLine; HUDMSG_PLAIN, messageId, colour, 100.1, yPos, 0);			
			}
		}


		int questNameX = 100.1;
		int difficultyX = 330.1;
		int exprTimeX = 430.1;
		int playerForQuestX = 500.1;

		SetFont("BIGFONT");
		HudMessage(s:"Quests"; HUDMSG_PLAIN, TITLE_MESSAGE_ID, CR_LIGHTBLUE, 320.4, 30.0, 0);
		
		int columnHeadingsY = 45.0;
		SetFont("SMALLFONT2");
		HudMessage(s:"NAME"; HUDMSG_PLAIN, BASE_GRID_MSG_ID, CR_CYAN, questNameX, columnHeadingsY, 0);
		HudMessage(s:"SKILL"; HUDMSG_PLAIN, BASE_GRID_MSG_ID + 1, CR_CYAN, difficultyX, columnHeadingsY, 0);
		HudMessage(s:"TIME LEFT"; HUDMSG_PLAIN, BASE_GRID_MSG_ID + 2, CR_CYAN, exprTimeX, columnHeadingsY, 0);
		HudMessage(s:"PLAYER"; HUDMSG_PLAIN, BASE_GRID_MSG_ID + 3, CR_CYAN, playerForQuestX, columnHeadingsY, 0);

		int questsListOffset = QUESTBOX_OPTIONS_LENGTH;
		for (i = 0; i < NUM_AVAILABLE_QUESTS; i++)
		{
			yPos = 60.0 + i*20.0;//FixedMul(i, 0.1);
			messageId = (BASE_GRID_MSG_ID + QUEST_GRID_WIDTH) + questsListOffset + (i*QUEST_GRID_WIDTH);
			colour = CR_GREEN;
			str playerForQuest = "";
			if (g_activeQuestStats[i][QUEST_STATS_PLAYER] >= 0) {
				playerForQuest = StrParam(n:g_activeQuestStats[i][QUEST_STATS_PLAYER]+1); //StrParam for players is 1-based!
			}
			str difficulty = "Unknown";
			if (g_activeQuestStats[i][QUEST_STATS_DIFFICULTY] == QUEST_EASY) {
				difficulty = "Easy";
			} else if (g_activeQuestStats[i][QUEST_STATS_DIFFICULTY] == QUEST_MEDIUM) {
				difficulty = "Medium";
			} else if (g_activeQuestStats[i][QUEST_STATS_DIFFICULTY] == QUEST_HARD) {
				difficulty = "Hard";
			}
			//int questName[20];// = getQuestName(i);
			//int questName = "                    ";
			//questName = StrParam(s:getQuestName(i), s:"            ");
			//StrLeft(questName, 5);
			//StrCpy(a:questName, StrParam(s:getQuestName(i), s:"            ";));
			
			//str strLine = //questBoxOptions[i];
			//strLine = StrParam(s:questName, s:"\t\t\t", s:difficulty, s:"\t",  d:g_activeQuestStats[i][QUEST_STATS_EXPRTIME], s:" ", s:playerForQuest);
			//g_activeQuestStats[i][QUEST_STATS_PLAYER];
			//g_activeQuestStats[i][QUEST_STATS_EXPRTIME];
			//g_activeQuestStats[i][QUEST_STATS_TIMELEFT];
			//g_activeQuestStats[i][QUEST_STATS_DIFFICULTY];

			if ((i+questsListOffset) == selectedItemIdx) {
				colour = CR_GOLD;
				HudMessage(s:">"; HUDMSG_PLAIN, messageId+4, colour, 95.1, yPos, 0);
			} else {
				//Clear the old cursor
				HudMessage(s:""; HUDMSG_PLAIN, messageId+4, colour, 100.1, yPos, 0);
			}
			//} else {
				/*
				if (basicCheckRequirements(i)) {
					colour = CR_GREEN;
				}*/
			HudMessage(s:getQuestName(i); HUDMSG_PLAIN, messageId, colour, questNameX, yPos, 0);			
			HudMessage(s:difficulty; HUDMSG_PLAIN, messageId+1, colour, difficultyX, yPos, 0);	
			//If a player is already doing a quest, show the time the player has left to complete it.
			//If no player has claimed a quest, then show how long before the quest expires and gets regenerated.
			int t = 0;
			if (g_activeQuestStats[i][QUEST_STATS_PLAYER] < 0) {
				t = g_activeQuestStats[i][QUEST_STATS_EXPRTIME];
			} else {
				t = g_activeQuestStats[i][QUEST_STATS_TIMELEFT];
			}
			HudMessage(d:t/60, s:":", d:(t%60)/10, d:t%10; HUDMSG_PLAIN, messageId+2, colour, exprTimeX, yPos, 0);			
			HudMessage(s:playerForQuest; HUDMSG_PLAIN, messageId+3, colour, playerForQuestX, yPos, 0);			
			//HudMessage(s:strLine; HUDMSG_PLAIN, messageId+4, colour, 400.1, yPos, 0);			
		}

		if (!buttonDepressed)
		{
		   if (buttons & BT_FORWARD)//&& buttons & BT_BACK)
		   {
			  buttonDepressed = true;
			  selectedItemIdx = (numMenuItems+selectedItemIdx-1) % numMenuItems;//math_max(0, selectedItemIdx-1);
		   } else if (buttons & BT_BACK)
		   {
			  buttonDepressed = true;
			  selectedItemIdx = (selectedItemIdx+1) % numMenuItems;//math_min(selectedItemIdx+1, CRAFTING_OPTIONS_LENGTH-1);
		   }
		   else if (buttons & BT_USE) //|| buttons & BT_ATTACK)
		   {
				buttonDepressed = true;
				//print(d: selectedItemIdx);
				if (selectedItemIdx < QUESTBOX_OPTIONS_LENGTH) {
					ACS_ExecuteAlways(questBoxScripts[selectedItemIdx], 0, selectedItemIdx);
				} else {
					//Start a quest
					ACS_ExecuteAlways(611, 0, selectedItemIdx-questsListOffset);
				}
		   }
		   //Exit if you hit the jump button
		   else if (buttons & BT_JUMP)
		   {
			    buttonDepressed = true;
				//print(d: selectedItemIdx);
				Delay(1);
				ACS_ExecuteAlways(751, 0);
				terminate;		   
			}
		}
		if (buttons == 0)
		{
			buttonDepressed = false;
		}

		delay(1);
	}
	
	SetHudSize(640, 480, false);
	//print(s:"no ShowCraftingScreen, returning");
}

//Abort quest
script 781 (void)
{
	//Call the script in QUESTS.acs and pass it the PlayerNumber().
	ACS_ExecuteAlways(615, 0, PlayerNumber());
}

/*
function bool basicCheckRequirements(int optionIdx)
{
	str req1inv = 		basicIngredients[optionIdx][CRAFTING_INGREDIENT_1];
	int req1amount = 	basicIngrAmounts[optionIdx][CRAFTING_INGREDIENT_1];
	str req2inv = 		basicIngrAmounts[optionIdx][CRAFTING_INGREDIENT_2];
	int req2amount = 	basicIngrAmounts[optionIdx][CRAFTING_INGREDIENT_2];
	str req3inv = 		basicIngrAmounts[optionIdx][CRAFTING_INGREDIENT_3];
	int req3amount = 	basicIngrAmounts[optionIdx][CRAFTING_INGREDIENT_3];

	//brain hurts

	bool allReqsSatisfied = true;
	if ((req1inv != "") && (CheckInventory(req1inv) < req1amount)) {
		allReqsSatisfied = false;
		//print(s:"req1 failed ", s:req1inv, s:" ", d:req1amount);
	}
	
	if ((req2inv != "") && (CheckInventory(req2inv) < req2amount)) {
		allReqsSatisfied = false;
		//print(s:"req2 failed");
	}
	if ((req3inv != "") && (CheckInventory(req3inv) < req3amount)) {
		allReqsSatisfied = false;
		//print(s:"req3 failed");
	}
	
	return allReqsSatisfied;
}*/