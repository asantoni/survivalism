//A deployed 3D floor
actor CFloor
{
	Tag "Wooden Floor"
	+SHOOTABLE
	+NOBLOOD
	+SOLID
	+NOGRAVITY
	+CANPASS
    +USESPECIAL
	//This causes momentary visual desync (chickens walk around but visually glitch through floors at the edges...):
	//+ACTLIKEBRIDGE //--> maybe crazy CPU
	//+DONTRIP
	
       //r16 performance warning - Watch out for if +ISMONSTER has a performance impact
    +ISMONSTER // For master/child - Only need for vagrant colonies - Remove with Zandronum 3.0 and verify
               // the vagrant colony buildings still get destroyed when the colony cube thingy dies.
    -COUNTKILL
    
    Species "CFloor"
    
    //For SupportTester checks
    //+HARMFRIENDS
    +DOHARMSPECIES
    -NOINFIGHTING
    -DONTHARMCLASS
    
    //CheckSupport
    +QUICKTORETALIATE
    
	Health 500
// 	Radius 120
// 	Height 4
    Radius 24
    Height 4

	Mass 0x7FFFFFFF
	
	DamageFactor "Axe", 500.0
	DamageFactor "SentryTurret", 0.0
    DamageFactor "EnemySentryTurret", 0.0
	DamageFactor "BoxKiller", 5000.0
    
    PainChance "CollapseCheck", 256
    PainChance "CheckSupport", 256
    PainChance "SupportConfirmed", 256

    //DeathSound "wood/breaklong"
    DeathSound "plank/break"

    const float SupportDistance = 64.0;
    
    var int user_masterReanchorAttempts;

	States
	{
		Spawn:
			TNT1 A 0 //Dummy frame is needed for A_Jump to work
            TNT1 A 0 A_SetUserVar("user_masterReanchorAttempts", 0)
			TNT1 A 0 A_PlaySound("click")
            TNT1 A 0 A_CopyFriendliness //For vagrant colonies - makes the floor friendly to bad guys
            //We're setting the CONSTRUCTION_TID later in the Idle state, as floors require the hate behaviour below.
            //Zandronum 3.1 or Zandronum 4.0:
            //TNT1 A 0 A_CheckProximity("Death", "CBox", 24.0, 1, CPXF_ANCESTOR|CPXF_CHECKSIGHT, AAPTR_DEFAULT)
            
            //Invoke A_Look and target a CONSTRUCTION_TID within our melee range.
            //If we don't see a target, die.
            //If we do see a target, set +NOGRAVITY and -ISMONSTER.
            TNT1 A 0 Thing_Hate(0, 99, 5)
        LookForSupport:
            TNT1 A 0
            TNT1 A 0 A_LookEx(LOF_NOSOUNDCHECK, 0.0, SupportDistance, 0.0, 360, "See")
            TNT1 A 0 A_Jump(255, "Death")
            goto Death
//         TestForSupport:
//             TNT1 A 0
//             //CFLO A 0 A_CustomMissile("CFloorSupportTester", 0.0, 25.0, 0, CMF_AIMDIRECTION | CMF_ABSOLUTEPITCH)
//             //CFLO A 0 A_CustomMissile("CFloorSupportTester", 0.0, 25.0, 90, CMF_AIMDIRECTION | CMF_ABSOLUTEPITCH)
//             //CFLO A 0 A_CustomMissile("CFloorSupportTester", 0.0, 25.0, 180, CMF_AIMDIRECTION | CMF_ABSOLUTEPITCH)
//             //CFLO A 0 A_CustomMissile("CFloorSupportTester", 0.0, 25.0, 270, CMF_AIMDIRECTION | CMF_ABSOLUTEPITCH)
//             CFLO A 0 A_SpawnItemEx("CFloorSupportTester", 0.0, 0.0, -4.0, 20.0, 0.0, 0.0, 0, 0, 0, 0)
//             CFLO A 0 A_SpawnItemEx("CFloorSupportTester", 0.0, 0.0, -4.0, 20.0, 0.0, 0.0, 90, 0, 0, 0)
//             CFLO A 0 A_SpawnItemEx("CFloorSupportTester", 0.0, 0.0, -4.0, 20.0, 0.0, 0.0, 180, 0, 0, 0)
//             CFLO A 0 A_SpawnItemEx("CFloorSupportTester", 0.0, 0.0, -4.0, 20.0, 0.0, 0.0, 270, 0, 0, 0)

//             CFLO A 0 A_ChangeFlag("NOGRAVITY", TRUE) //FIXME: Just for debugging
//             CFLO A 30
//             TNT1 A 0 A_Jump(255, "Death")
//             goto Death
        See:
            TNT1 A 0
            TNT1 A 0 A_JumpIfCloser(SupportDistance, "SeeValid") //Takes into account Z distance for us, which is important!
            TNT1 A 0 A_Jump(256, "Death")
            goto Death
        SeeValid:
            TNT1 A 0 
            CFLO A 0 A_ChangeFlag("NOGRAVITY", TRUE)
            CFLO A 0 A_ChangeFlag("NOTARGET", TRUE)
            CFLO A 0 A_ChangeFlag("ISMONSTER", FALSE)
            CFLO A 0 A_ChangeVelocity(0.0, 0.0, 0.0, CVF_REPLACE)
            //This is some magic - We want this floor to die if the CBox we're attached
            //to gets destroyed. The CBox is the floor's target in the See state, so
            //let's set CBox as our Master. CBox will kill its children when it dies,
            //which will kill us then.
            CFLO A 0 A_RearrangePointers(AAPTR_DEFAULT, AAPTR_TARGET, AAPTR_DEFAULT) //Sets master = target.
            
            //If the master pointer is NULL (assignment failed), it means we would have had two floors that would
            //have been masters of each other. In this case, tell our target floor to try to reanchor itself.
            //CFLO A 0 A_JumpIf(IsPointerEqual(AAPTR_MASTER, AAPTR_NULL), "ForceMasterReanchor")
            
            //Validate that our master's chain of masters is eventually attached to a valid anchor.
            CFLO A 0 A_JumpIf(!ACS_NamedExecuteWithResult("CheckForAnchor", 0,0,0,0), "Death")
         
            //TODO: Use ACS version of IsPointerEqual to check if the we're the 
            //      master of our master, which means we have two floors that are
            //      circularly attached to each other. We should die in that case.
            
            //Restore these flags
            CFLO A 0 A_ChangeFlag("NOTARGET", FALSE)
            CFLO A 0 A_ChangeFlag("ISMONSTER", TRUE)
            goto Idle
            
//         ForceMasterReanchor:
//             //For our target to reanchor itself. It is our master, but we want to use it
//             //as our master instead because we lost our support.
//             TNT1 A 0
//             TNT1 A 0 A_JumpIf(user_masterReanchorAttempts > 0, "Death")
//             CFLO A 0 A_DamageTracer(1, "Reanchor", 0, 0, 0, 0, 0) --> wah wah, not implemented in Zandronum yet. Pray for Zandronum 4.0?
//             CFLO A 0 A_SetUserVar("user_masterReanchorAttempts", masterReanchorAttempts + 1)
//             CFLO A 35
//             goto SeeValid //Reattempt setting it as our master.
            
//         LookForSupportNoValidate:
//             TNT1 A 0
//             TNT1 A 0 A_Log("LookForSuportNoValidate")
//             TNT1 A 0 A_LookEx(LOF_NOSOUNDCHECK, 0.0, SupportDistance, 0.0, 360, "SeeNoValidate")
//             TNT1 A 0 A_Jump(255, "Death")
//             goto Death
//         SeeNoValidate:
//             TNT1 A 0
//             TNT1 A 0 A_JumpIfCloser(SupportDistance, "SeeValidNoValidate") //Takes into account Z distance for us, which is important!
//             TNT1 A 0 A_Jump(256, "Death")
//             goto Death
//         SeeValidNoValidate:
//             TNT1 A 0
//             CFLO A 0 A_ChangeFlag("NOGRAVITY", TRUE)
//             CFLO A 0 A_ChangeFlag("NOTARGET", TRUE)
//             CFLO A 0 A_ChangeFlag("ISMONSTER", FALSE)
//             CFLO A 0 A_ChangeVelocity(0.0, 0.0, 0.0, CVF_REPLACE)
//             //This is some magic - We want this floor to die if the CBox we're attached
//             //to gets destroyed. The CBox is the floor's target in the See state, so
//             //let's set CBox as our Master. CBox will kill its children when it dies,
//             //which will kill us then.
//             CFLO A 0 A_RearrangePointers(AAPTR_DEFAULT, AAPTR_TARGET, AAPTR_DEFAULT) //Sets master = target.

//             //XXX: We do not validation of the master chain in this version.
                     
//             //Restore these flags
//             CFLO A 0 A_ChangeFlag("NOTARGET", FALSE)
//             CFLO A 0 A_ChangeFlag("ISMONSTER", TRUE)
//             goto Idle
         
        Idle:
            TNT1 A 0
            //Set the TID to CONSTRUCTION_TID so that monsters can
			//attack it (baddies.acs)
            TNT1 A 0 ACS_ExecuteAlways(503, 0)
            CFLO A -1
            Wait
  
        Pain:
            TNT1 A 0
            TNT1 A 0 
            goto Idle
        Pain.CollapseCheck:
            TNT1 A 0
            TNT1 A 0 //A_Log("CollapseCheck")
            //CFLO AAAAA 2 A_FadeTo(0.5, 0.1, false)
            //CFLO AAAAA 2 A_FadeTo(1.0, 0.1, false)
            CFLO A 5 //Stall a bit to make cascading collapses look cool
            //The box we were anchored to died, so let's see if there's another adjacent box we can reattach to...
            //... otherwise we die.
            TNT1 A 0 A_Jump(256, "LookForSupport")
            //TNT1 A 0 A_Jump(256, "TestForSupport")
            goto See
        Pain.Reanchor:
            TNT1 A 0
            TNT1 A 0 A_Log("Reanchor")
            CFLO A 3
            TNT1 A 0 A_Jump(256, "LookForSupport")

//         Pain.CheckSupport:
//             //An adjacent floor has tested if we can support it. If we took damage, we can!
//             TNT1 A 0
//             TNT1 A 0 A_Log("Floor took CheckSupport damage, hitting back...")
            TNT1 A 0 A_CustomMissile("SupportConfirmed", 19, 0.0, 0, 0, 0)
//             CFLO A 0 A_SpawnItemEx("SupportConfirmed", 0.0, 0.0, -4.0, 20.0, 0.0, 0.0, 0, 0, 0, 0)
//             CFLO A 0 A_SpawnItemEx("SupportConfirmed", 0.0, 0.0, -4.0, 20.0, 0.0, 0.0, 90, 0, 0, 0)
//             CFLO A 0 A_SpawnItemEx("SupportConfirmed", 0.0, 0.0, -4.0, 20.0, 0.0, 0.0, 180, 0, 0, 0)
//             CFLO A 0 A_SpawnItemEx("SupportConfirmed", 0.0, 0.0, -4.0, 20.0, 0.0, 0.0, 270, 0, 0, 0)
//             TNT1 A 0 A_ClearTarget
//             goto Idle
//         Pain.SupportConfirmed:
//             TNT1 A 0
//             TNT1 A 0 A_Log("SupportConfirmed!")
//             TNT1 A 0 A_Jump(256, "SeeValid")
//             goto SeeValid
		Death:
			TNT1 A 0 //Dummy frame is needed
            TNT1 A 0 A_ChangeFlag("INVISIBLE", TRUE)  //Go invisible so CollapseCheck doesn't pick us up
            TNT1 A 0 A_DamageChildren(1, "CollapseCheck")
            //A_KillChildren("BoxKiller")
			//Turn back into a CFloorItem when we get destroyed
            TNT1 A 0 A_Scream
            TNT1 A 0 A_SpawnItemEx("WoodShrapnelSpawner", 0.0, 0, 0.0, 0, 0, 0, 0, SXF_CLIENTSIDE)
			TNT1 A 0 A_SpawnItemEx("CFloorItem", 8, 0, 8, 0, 0, 0, 0, 0, 0)
			Stop

	}
}

//The construction box item you pick up off the ground.
actor CFloorItem : CustomInventory 1154
{
	Tag "Construction Floor"
	+SHOOTABLE
	+NOBLOOD
	//+CANPASS
	+WINDTHRUST
	Health 50
	Inventory.PickupMessage "Picked up a construction floor"
	Inventory.UseSound "misc/invuse"
	+INVENTORY.INVBAR
	Inventory.Icon "CFLIA0" //"PISTI0"
	Inventory.MaxAmount 400
	//+COUNTITEM
	+INVENTORY.PICKUPFLASH
	
   States {
      Spawn:
         CRTG A 1
         Wait
      Use:
         TNT1 A 0 A_JumpIfInventory("ConstructionMutex",1,"Cancel")
         TNT1 A 0 A_SpawnItemEx("CFloor", -x%48+((x%48)>24)*48-((x%48)<-24)*48, -y%48+((y%48)>24)*48-((y%48)<-24)*48, 256.0, 0.0, 0.0, 0.0, 0.0, SXF_ABSOLUTEPOSITION | SXF_ABSOLUTEANGLE | SXF_ABSOLUTEMOMENTUM)
         TNT1 A 0 ACS_ExecuteAlways(256,0)      //Give ConstructionMutex, Wait, Take ConstructionMutex
         Stop
      Cancel:
         TNT1 A 0
         Fail
   }

}


actor CFloorGhost
{
	Tag "Construction Floor Ghost"
	-SOLID
	+CANPASS
    +USESPECIAL
	+NOGRAVITY	
	
	Health 0x7FFFFFFF
	Radius 24
	Height 38
	Mass 0x7FFFFFFF

    RenderStyle "Translucent"
    Alpha 0.5

	States
	{
		Spawn:
			TNT1 A 0 //Dummy frame is needed for A_Jump to work
			//PLAY A 200 A_Jump(256, "DropYellowboy")
			//TNT1 A 0 A_SetSpecial(80, 
			CFLO A 4 
			goto Death
		Death:
			TNT1 A 0 //Dummy frame is needed
			TNT1 A -1
			Stop

	}
}

actor BossCFloor : CFloor
{
    +INVULNERABLE
    +MISSILE //So it goes into BOUNCE state when it hits the floor
    Speed 0
    +CANPASS
    //+USEBOUNCESTATE -> Unsupported in Zandronum 2.0
    +ACTLIKEBRIDGE
    
	RenderStyle "Translucent"
	Alpha 0.2
    
    Radius 160
   	Height 4

    
    States
    {
    
		Spawn:
			TNT1 A 0 //Dummy frame is needed for A_Jump to work
			TNT1 A 0
			CFLO A -1 
			Wait
        Bounce:
        Death:
            TNT1 A 0
            TNT1 A 0 A_PlaySound("glass/break1")
            TNT1 A 0 A_UnSetInvulnerable
            TNT1 A 0 A_SpawnItemEx("GlassShrapnelSpawner", -32.0, 0, 0.0, 0, 0, 0, 0, SXF_CLIENTSIDE)
            TNT1 A 0 A_SpawnItemEx("GlassShrapnelSpawner", 32.0, 0, 0.0, 0, 0, 0, 0, SXF_CLIENTSIDE)
            TNT1 A 0 A_SpawnItemEx("GlassShrapnelSpawner", 0.0, 32.0, 0.0, 0, 0, 0, 0, SXF_CLIENTSIDE)
            TNT1 A 0 A_SpawnItemEx("GlassShrapnelSpawner", 0.0, -32.0, 0.0, 0, 0, 0, 0, SXF_CLIENTSIDE)
			//Turn back into a CBoxItem when we get destroyed
            //TNT1 A 0 A_Die
            stop
    }
}

actor CFloorSupportTester
{
    Projectile
    DamageType "CheckSupport"
    damage 1
    Speed 20
    VSpeed 0
    ProjectileKickBack 0
    Height 10
    //Radius 6
    +RIPPER
    
    //+HARMFRIENDS
    +DOHARMSPECIES
    -DONTHARMCLASS


    States
    {
        Spawn:
            TNT1 A 0 
            SVXP A 5
            stop
        Death:
            TNT1 A 0
            SVXP AAAAA 5
            stop
    }
}

actor SupportConfirmed
{
    Projectile
    DamageType "SupportConfirmed"
    damage 1
    Speed 20
    VSpeed 0
    ProjectileKickBack 0
    Height 10
    //Radius 6
    +RIPPER
    
    //+HARMFRIENDS
    +DOHARMSPECIES
    -DONTHARMCLASS
    

    
    States
    {
        Spawn:
            TNT1 A 0 
            SVXP A 5
            stop
        Death:
            TNT1 A 0
            SVXP AAAAA 5
            stop
    }
}